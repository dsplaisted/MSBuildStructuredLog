@page "/Home"
@using System.IO
@using System.Collections 
@using Microsoft.Build.Logging.StructuredLogger
@using Radzen
@using Radzen.Blazor
@inject Blazor.FileReader.IFileReaderService fileReaderService
@inject NotificationService notificationService

    <center>
        <h1>Structured Log Viewer</h1>
        <input type="file" @ref=inputElement />
        <button @onclick=ReadFile class="btn btn-primary">Read file</button>
        <button @onclick=ClearFile class="btn btn-primary">Clear</button>
        <br />
        <br />
        @if (reading)
        {
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
            <h3>@waitText</h3>
        }
    </center>


<h1>@loadTimeText</h1>
<br />
<br />
@if (binLogSelected)
{
    <RadzenTree Data="@entries" Expand="@((TreeExpandEventArgs args) => {OnExpand(args);})">
        <RadzenTreeLevel Template="@TreeDesign" Text="@GetTextForNode"
                         HasChildren="@((node) => {
                                                if (node is TreeNode)
                                                    return ((TreeNode)node).HasChildren;
                                                else return false;
                                            })" />
    </RadzenTree>
}
<RadzenNotification />

@code {
    bool binLogSelected = false;
    ElementReference inputElement;
    bool reading;
    string waitText;
    string loadTimeText = "";

    IEnumerable<BaseNode> entries = null;

    RenderFragment<RadzenTreeItem> TreeDesign = (context) => builder =>
    {
        builder.OpenComponent<RadzenIcon>(0);
        builder.AddAttribute(1, "Icon", "crop_16_9");
        var node = (BaseNode)context.Value;

        if (node is Folder)
        {
            builder.AddAttribute(2, "Style", "color: Goldenrod");
        } else if (node is Target)
        {
            builder.AddAttribute(2, "Style", "color: MediumPurple");
        }
        else if (node is Microsoft.Build.Logging.StructuredLogger.Task)
        {
            builder.AddAttribute(2, "Style", "color: DodgerBlue");
        }
        else if (node is Parameter)
        {
            builder.AddAttribute(2, "Style", "color: DodgerBlue");
        }
        else if (node is Microsoft.Build.Logging.StructuredLogger.Property)
        {
            builder.AddAttribute(2, "Style", "color: DodgerBlue");
        }
        else if (node is Item)
        {
            builder.AddAttribute(2, "Style", "color: MediumAquamarine");
        }
        else if (node is Metadata)
        {
            builder.AddAttribute(2, "Style", "color: MediumAquamarine");
        }
        else if (node is Message)
        {
            builder.AddAttribute(2, "Style", "color: LightGray");
        }
        else if (node is Import)
        {
            builder.AddAttribute(2, "Style", "color: Sienna");
        }
        else if (node is NoImport)
        {
            builder.AddAttribute(2, "Style", "color: Red");
        }
        else if (node is Error)
        {
            builder.AddAttribute(2, "Style", "color: Red");
        }
        else if (node is Warning)
        {
            builder.AddAttribute(2, "Style", "color: Gold");
        }
        builder.CloseComponent();
        builder.AddContent(3, context.Text);
    };

    async System.Threading.Tasks.Task ShowNotification(NotificationMessage message)
    {
        message.Severity = NotificationSeverity.Error;
        message.Summary = "Wrong File Type!";
        message.Detail = "Currently we only read .binlog files. Click Instructions to learn more.";
        message.Duration = 4000;
        notificationService.Notify(message);
    }


    string GetTextForNode(Object node)
    {
        string text = node switch
        {
            Project p => p.Name,
            Target t => "Target " + t.Name,
            _ => node.ToString()
        };
        if (text.Contains("Detailed summary"))
        {
            text = "Detailed Summary...";
        }
        return text;

    }

    void OnExpand(TreeExpandEventArgs args)
    {
        if (args.Value is TreeNode)
        {
            args.Children.Data = ((TreeNode)args.Value).Children;
            args.Children.Text = GetTextForNode;
            args.Children.HasChildren = (node) =>
            {
                if (node is TreeNode)
                    return ((TreeNode)node).HasChildren;
                else
                    return false;
            };
            args.Children.Template = TreeDesign;
        }
        else
        {
            args.Children.Text = (Object obj) => (string)args.Value;
            args.Children.Data = null;
            args.Children.HasChildren = (Object obj) => false;
        }
    }

    public async System.Threading.Tasks.Task ClearFile()
    {
        await fileReaderService.CreateReference(inputElement).ClearValue();
        binLogSelected = false;
        reading = false;
        waitText = "";
    }

    public async System.Threading.Tasks.Task ReadFile()
    {
        binLogSelected = false;
        reading = true;
        this.StateHasChanged();
        waitText = "Here we go...";
        //await System.Threading.Tasks.Task.Delay(2000);
        var files = (await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync());
        foreach (Blazor.FileReader.IFileReference file in files)
        {
            var fileInfo = await file.ReadFileInfoAsync();
            String[] split = fileInfo.Name.Split(".");
            if (!String.Equals("binlog", split[split.Length - 1]))
            {
                await ShowNotification(new NotificationMessage());
                await ClearFile();
                break;
            }
            waitText = "Still reading...";
            this.StateHasChanged();
            //await System.Threading.Tasks.Task.Delay(2000);

            async Task<Build> ReadBuildAsync(Blazor.FileReader.IFileReference fileReference)
            {
                var stream = await file.OpenReadAsync();
                var memoryStream = new MemoryStream((int)stream.Length);
                await stream.CopyToAsync(memoryStream);
                memoryStream.Position = 0;
                Build build = Serialization.ReadBinLog(memoryStream);
                return build;
            }

            var readBuildTask = System.Threading.Tasks.Task.Run(() => ReadBuildAsync(file));

            int second = 0;
            System.Diagnostics.Stopwatch sw = System.Diagnostics.Stopwatch.StartNew();

            do
            {
                waitText = second.ToString();
                this.StateHasChanged();
                second++;
            }
            while (await System.Threading.Tasks.Task.WhenAny(readBuildTask, System.Threading.Tasks.Task.Delay(1000)) != readBuildTask);

            Build build = await readBuildTask;
            loadTimeText = $"Loaded in {sw.Elapsed.TotalSeconds} seconds";

            entries = (IEnumerable<BaseNode>)build.Children;
            binLogSelected = true;
            splitDescription();
        }
        this.StateHasChanged();
        reading = false;
        waitText = "";
    }

    void splitDescription()
    {
        BaseNode[] nodes = entries.ToArray();
        for (int i = 0; i < nodes.Length; i++)
        {
            if (nodes[i].ToString().Contains("Detailed summary"))
            {
                ((Message)nodes[i]).AddChild(new Message() { Text = nodes[i].ToString().Substring(17) });
            }
        }
    }

}
