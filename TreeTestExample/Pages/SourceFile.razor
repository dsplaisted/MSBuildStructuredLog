@page "/SourceFile"
@using Microsoft.Build.Logging.StructuredLogger
@using StructuredLogViewer
@using System.IO

<button @onclick=Exit class="btn btn-primary">Close</button>

<MonacoEditor @ref="_editor" Id="monaco-editor" ConstructionOptions="EditorConstructionOptions"/>

@code {
    private MonacoEditor _editor { get; set; }

    [CascadingParameter]
    public SplitPane ContainerSplit { get; set; }
    string text;

    public void Render()
    {
        this.StateHasChanged();
    }

    public async System.Threading.Tasks.Task Exit()
    {
        ContainerSplit.show += 1;
        ContainerSplit.Render();
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions()
        {
            Value = text
        };
    }
    


    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        SourceFileResolver sourceFileResolver = new SourceFileResolver(ContainerSplit.build.SourceFilesArchive);
        //if (CanView(ContainerSplit.selected, sourceFileResolver) && CanOpenFile(ContainerSplit.selected, sourceFileResolver))
        //{
        string path = "";
        if (ContainerSplit.selected is AbstractDiagnostic)
        {
            path = ((AbstractDiagnostic)ContainerSplit.selected).ProjectFile;
        }
        else if (ContainerSplit.selected is Project)
        {
            path = ((Project)ContainerSplit.selected).SourceFilePath;
        }
        else if (ContainerSplit.selected is Target)
        {
            path = ((Target)ContainerSplit.selected).SourceFilePath;
        }
        else if (ContainerSplit.selected is Microsoft.Build.Logging.StructuredLogger.Task)
        {
            path = ((Target)((Microsoft.Build.Logging.StructuredLogger.Task)ContainerSplit.selected).Parent).SourceFilePath;
        }
        else if (ContainerSplit.selected is IHasSourceFile)
        {
            path = ((IHasSourceFile)ContainerSplit.selected).SourceFilePath;
        }
        else if (ContainerSplit.selected is NameValueNode)
        {
            //not sure
        }
        else if (ContainerSplit.selected is TextNode)
        {
            //not sure
        }


        text = sourceFileResolver.GetSourceFileText(path).Text;
        if (text == null)
        {
            text = "No file to display";
        }

        //await _editor.SetValue(text);
        //this.StateHasChanged();
        //}
    }

    private bool CanOpenFile(BaseNode node, SourceFileResolver sourceFileResolver)
    {
        return node is Import i && sourceFileResolver.HasFile(i.ImportedProjectFilePath);
    }

    private bool CanView(BaseNode node, SourceFileResolver sourceFileResolver)
    {
        return node is AbstractDiagnostic
            || node is Project
            || (node is Target t && t.SourceFilePath != null && sourceFileResolver.HasFile(t.SourceFilePath))
            || (node is Microsoft.Build.Logging.StructuredLogger.Task task && task.Parent is Target parentTarget && sourceFileResolver.HasFile(parentTarget.SourceFilePath))
            || (node is IHasSourceFile ihsf && ihsf.SourceFilePath != null && sourceFileResolver.HasFile(ihsf.SourceFilePath))
            || (node is NameValueNode nvn && nvn.IsValueShortened)
            || (node is TextNode tn && tn.IsTextShortened);
    }
}
